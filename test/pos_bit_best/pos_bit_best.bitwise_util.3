<pos_bit_best>:
 0x1d00: TEST	%EDI,%EDI
 0x1d02: JE	1dab <pos_bit_best+0xab>
 0x1d08: MOV	%EDI,%EDX
 0x1d0a: XOR	%DX,%DX
 0x1d0d: CMP	$0x1,%EDX
 0x1d10: SBB	%ESI,%ESI
 0x1d12: AND	$0x1000f000,%ESI
 0x1d18: SUB	$0x10000000,%ESI
 0x1d1e: CMP	$0x1,%EDX
 0x1d21: SBB	%ECX,%ECX
 0x1d23: AND	$-0x10,%ECX
 0x1d26: ADD	$0x18,%ECX
 0x1d29: CMP	$0x1,%EDX
 0x1d2c: SBB	%EAX,%EAX
 0x1d2e: AND	$-0x10,%EAX
 0x1d31: ADD	$0x18,%EAX
 0x1d34: CMP	$0x1,%EDX
 0x1d37: SBB	%R10D,%R10D
 0x1d3a: AND	$-0xefff10,%R10D
 0x1d41: ADD	$0xf00000,%R10D
 0x1d48: CMP	$0x1,%EDX
 0x1d4b: SBB	%R9D,%R9D
 0x1d4e: NOT	%R9D
 0x1d51: AND	$0x10,%R9D
 0x1d55: CMP	$0x1,%EDX
 0x1d58: SBB	%R8D,%R8D
 0x1d5b: NOT	%R8D
 0x1d5e: AND	$0x10,%R8D
 0x1d62: CMP	$0x1,%EDX
 0x1d65: SBB	%EDX,%EDX
 0x1d67: AND	$0x100ff00,%EDX
 0x1d6d: SUB	$0x1000000,%EDX
 0x1d73: AND	%EDI,%EDX
 0x1d75: CMOVE	%R10D,%ESI
 0x1d79: CMOVE	%R9D,%ECX
 0x1d7d: CMOVE	%R8D,%EAX
 0x1d81: TEST	%ESI,%EDI
 0x1d83: JE	1d8b <pos_bit_best+0x8b>
 0x1d85: ADD	$0x4,%EAX
 0x1d88: MOVZX	%AL,%ECX
 0x1d8b: MOV	$0xc,%EDX
 0x1d90: SAL	%CL,%EDX
 0x1d92: TEST	%EDI,%EDX
 0x1d94: JE	1d9c <pos_bit_best+0x9c>
 0x1d96: ADD	$0x2,%EAX
 0x1d99: MOVZX	%AL,%ECX
 0x1d9c: MOV	$0x2,%EDX
 0x1da1: SAL	%CL,%EDX
 0x1da3: TEST	%EDI,%EDX
 0x1da5: SETNE	%DL
 0x1da8: ADD	%EDX,%EAX
 0x1daa: RET
 0x1dab: PUSH	%RAX
 0x1dac: MOV	$0x1,%EDI
 0x1db1: CALL	1060 <exit@plt>
 0x1db6: NOPW	%CS:(%RAX,%RAX,1)
