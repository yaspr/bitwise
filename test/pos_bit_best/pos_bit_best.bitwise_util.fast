<pos_bit_best>:
 0x1c80: TEST	%EDI,%EDI
 0x1c82: JE	1d2b <pos_bit_best+0xab>
 0x1c88: MOV	%EDI,%EDX
 0x1c8a: XOR	%DX,%DX
 0x1c8d: CMP	$0x1,%EDX
 0x1c90: SBB	%ESI,%ESI
 0x1c92: AND	$0x1000f000,%ESI
 0x1c98: SUB	$0x10000000,%ESI
 0x1c9e: CMP	$0x1,%EDX
 0x1ca1: SBB	%ECX,%ECX
 0x1ca3: AND	$-0x10,%ECX
 0x1ca6: ADD	$0x18,%ECX
 0x1ca9: CMP	$0x1,%EDX
 0x1cac: SBB	%EAX,%EAX
 0x1cae: AND	$-0x10,%EAX
 0x1cb1: ADD	$0x18,%EAX
 0x1cb4: CMP	$0x1,%EDX
 0x1cb7: SBB	%R10D,%R10D
 0x1cba: AND	$-0xefff10,%R10D
 0x1cc1: ADD	$0xf00000,%R10D
 0x1cc8: CMP	$0x1,%EDX
 0x1ccb: SBB	%R9D,%R9D
 0x1cce: NOT	%R9D
 0x1cd1: AND	$0x10,%R9D
 0x1cd5: CMP	$0x1,%EDX
 0x1cd8: SBB	%R8D,%R8D
 0x1cdb: NOT	%R8D
 0x1cde: AND	$0x10,%R8D
 0x1ce2: CMP	$0x1,%EDX
 0x1ce5: SBB	%EDX,%EDX
 0x1ce7: AND	$0x100ff00,%EDX
 0x1ced: SUB	$0x1000000,%EDX
 0x1cf3: AND	%EDI,%EDX
 0x1cf5: CMOVE	%R10D,%ESI
 0x1cf9: CMOVE	%R9D,%ECX
 0x1cfd: CMOVE	%R8D,%EAX
 0x1d01: TEST	%ESI,%EDI
 0x1d03: JE	1d0b <pos_bit_best+0x8b>
 0x1d05: ADD	$0x4,%EAX
 0x1d08: MOVZX	%AL,%ECX
 0x1d0b: MOV	$0xc,%EDX
 0x1d10: SAL	%CL,%EDX
 0x1d12: TEST	%EDI,%EDX
 0x1d14: JE	1d1c <pos_bit_best+0x9c>
 0x1d16: ADD	$0x2,%EAX
 0x1d19: MOVZX	%AL,%ECX
 0x1d1c: MOV	$0x2,%EDX
 0x1d21: SAL	%CL,%EDX
 0x1d23: TEST	%EDI,%EDX
 0x1d25: SETNE	%DL
 0x1d28: ADD	%EDX,%EAX
 0x1d2a: RET
 0x1d2b: PUSH	%RAX
 0x1d2c: MOV	$0x1,%EDI
 0x1d31: CALL	1060 <exit@plt>
 0x1d36: NOPW	%CS:(%RAX,%RAX,1)
