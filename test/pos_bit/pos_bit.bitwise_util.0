<pos_bit>:
 0x1612: PUSH	%RBP
 0x1613: MOV	%RSP,%RBP
 0x1616: SUB	$0x20,%RSP
 0x161a: MOV	%EDI,-0x14(%RBP)
 0x161d: CMPL	$0,-0x14(%RBP)
 0x1621: JNE	162d <pos_bit+0x1b>
 0x1623: MOV	$0x1,%EDI
 0x1628: CALL	1060 <exit@plt>
 0x162d: MOVB	$0x1f,-0x1(%RBP)
 0x1631: JMP	1651 <pos_bit+0x3f>
  (7)0x1633: MOV	-0x14(%RBP),%EDX
  (7)0x1636: MOVSX	-0x1(%RBP),%EAX
  (7)0x163a: MOV	%EAX,%ECX
  (7)0x163c: SHR	%CL,%EDX
  (7)0x163e: MOV	%EDX,%EAX
  (7)0x1640: AND	$0x1,%EAX
  (7)0x1643: TEST	%EAX,%EAX
  (7)0x1645: JNE	1659 <pos_bit+0x47>
  (7)0x1647: MOVZX	-0x1(%RBP),%EAX
  (7)0x164b: SUB	$0x1,%EAX
  (7)0x164e: MOV	%AL,-0x1(%RBP)
  (7)0x1651: CMPB	$-0x1,-0x1(%RBP)
  (7)0x1655: JNE	1633 <pos_bit+0x21>
 0x1657: JMP	165a <pos_bit+0x48>
 0x1659: NOP
 0x165a: MOVZX	-0x1(%RBP),%EAX
 0x165e: LEAVE
 0x165f: RET
<pos_bit_opti>:
 0x1660: PUSH	%RBP
 0x1661: MOV	%RSP,%RBP
 0x1664: SUB	$0x30,%RSP
 0x1668: MOV	%EDI,-0x24(%RBP)
 0x166b: CMPL	$0,-0x24(%RBP)
 0x166f: JNE	167b <pos_bit_opti+0x1b>
 0x1671: MOV	$0x1,%EDI
 0x1676: CALL	1060 <exit@plt>
 0x167b: MOVL	$0xffff,-0x10(%RBP)
 0x1682: MOVL	$-0x10000,-0xc(%RBP)
 0x1689: MOV	-0x24(%RBP),%EAX
 0x168c: MOV	%EAX,-0x4(%RBP)
 0x168f: MOVB	$0,-0x11(%RBP)
 0x1693: MOVL	$0x10,-0x8(%RBP)
 0x169a: JMP	16d9 <pos_bit_opti+0x79>
  (8)0x169c: MOV	-0x24(%RBP),%EAX
  (8)0x169f: AND	-0xc(%RBP),%EAX
  (8)0x16a2: MOV	%EAX,-0x4(%RBP)
  (8)0x16a5: CMPL	$0,-0x4(%RBP)
  (8)0x16a9: JE	16b9 <pos_bit_opti+0x59>
  (8)0x16ab: MOV	-0x8(%RBP),%EAX
  (8)0x16ae: MOV	%EAX,%EDX
  (8)0x16b0: MOVZX	-0x11(%RBP),%EAX
  (8)0x16b4: ADD	%EDX,%EAX
  (8)0x16b6: MOV	%AL,-0x11(%RBP)
  (8)0x16b9: SARL	$0x1,-0x8(%RBP)
  (8)0x16bc: MOV	-0x8(%RBP),%EAX
  (8)0x16bf: MOV	%EAX,%ECX
  (8)0x16c1: SARL	%CL,-0x10(%RBP)
  (8)0x16c4: MOVSX	-0x11(%RBP),%EDX
  (8)0x16c8: MOV	-0x8(%RBP),%EAX
  (8)0x16cb: ADD	%EDX,%EAX
  (8)0x16cd: MOV	-0x10(%RBP),%EDX
  (8)0x16d0: MOV	%EAX,%ECX
  (8)0x16d2: SAL	%CL,%EDX
  (8)0x16d4: MOV	%EDX,%EAX
  (8)0x16d6: MOV	%EAX,-0xc(%RBP)
  (8)0x16d9: CMPL	$0,-0x8(%RBP)
  (8)0x16dd: JNE	169c <pos_bit_opti+0x3c>
 0x16df: MOVZX	-0x11(%RBP),%EAX
 0x16e3: LEAVE
 0x16e4: RET
<pos_bit_best>:
 0x16e5: PUSH	%RBP
 0x16e6: MOV	%RSP,%RBP
 0x16e9: SUB	$0x20,%RSP
 0x16ed: MOV	%EDI,-0x14(%RBP)
 0x16f0: CMPL	$0,-0x14(%RBP)
 0x16f4: JNE	1700 <pos_bit_best+0x1b>
 0x16f6: MOV	$0x1,%EDI
 0x16fb: CALL	1060 <exit@plt>
 0x1700: MOVB	$0,-0x1(%RBP)
 0x1704: MOV	-0x14(%RBP),%EAX
 0x1707: MOV	$0,%AX
 0x170b: TEST	%EAX,%EAX
 0x170d: JE	1716 <pos_bit_best+0x31>
 0x170f: MOV	$0x10,%EAX
 0x1714: JMP	171b <pos_bit_best+0x36>
 0x1716: MOV	$0,%EAX
 0x171b: MOV	%AL,-0x1(%RBP)
 0x171e: MOVSX	-0x1(%RBP),%EAX
 0x1722: MOV	$0xff00,%EDX
 0x1727: MOV	%EAX,%ECX
 0x1729: SAL	%CL,%EDX
 0x172b: MOV	%EDX,%EAX
 0x172d: AND	-0x14(%RBP),%EAX
 0x1730: TEST	%EAX,%EAX
 0x1732: JE	173b <pos_bit_best+0x56>
 0x1734: MOV	$0x8,%EDX
 0x1739: JMP	1740 <pos_bit_best+0x5b>
 0x173b: MOV	$0,%EDX
 0x1740: MOVZX	-0x1(%RBP),%EAX
 0x1744: ADD	%EDX,%EAX
 0x1746: MOV	%AL,-0x1(%RBP)
 0x1749: MOVSX	-0x1(%RBP),%EAX
 0x174d: MOV	$0xf0,%EDX
 0x1752: MOV	%EAX,%ECX
 0x1754: SAL	%CL,%EDX
 0x1756: MOV	%EDX,%EAX
 0x1758: AND	-0x14(%RBP),%EAX
 0x175b: TEST	%EAX,%EAX
 0x175d: JE	1766 <pos_bit_best+0x81>
 0x175f: MOV	$0x4,%EDX
 0x1764: JMP	176b <pos_bit_best+0x86>
 0x1766: MOV	$0,%EDX
 0x176b: MOVZX	-0x1(%RBP),%EAX
 0x176f: ADD	%EDX,%EAX
 0x1771: MOV	%AL,-0x1(%RBP)
 0x1774: MOVSX	-0x1(%RBP),%EAX
 0x1778: MOV	$0xc,%EDX
 0x177d: MOV	%EAX,%ECX
 0x177f: SAL	%CL,%EDX
 0x1781: MOV	%EDX,%EAX
 0x1783: AND	-0x14(%RBP),%EAX
 0x1786: TEST	%EAX,%EAX
 0x1788: JE	1791 <pos_bit_best+0xac>
 0x178a: MOV	$0x2,%EDX
 0x178f: JMP	1796 <pos_bit_best+0xb1>
 0x1791: MOV	$0,%EDX
 0x1796: MOVZX	-0x1(%RBP),%EAX
 0x179a: ADD	%EDX,%EAX
 0x179c: MOV	%AL,-0x1(%RBP)
 0x179f: MOVSX	-0x1(%RBP),%EAX
 0x17a3: MOV	$0x2,%EDX
 0x17a8: MOV	%EAX,%ECX
 0x17aa: SAL	%CL,%EDX
 0x17ac: MOV	%EDX,%EAX
 0x17ae: AND	-0x14(%RBP),%EAX
 0x17b1: TEST	%EAX,%EAX
 0x17b3: SETNE	%AL
 0x17b6: MOV	%EAX,%EDX
 0x17b8: MOVZX	-0x1(%RBP),%EAX
 0x17bc: ADD	%EDX,%EAX
 0x17be: MOV	%AL,-0x1(%RBP)
 0x17c1: MOVZX	-0x1(%RBP),%EAX
 0x17c5: LEAVE
 0x17c6: RET
