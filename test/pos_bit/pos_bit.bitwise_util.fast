<pos_bit>:
 0x1be0: TEST	%EDI,%EDI
 0x1be2: JE	1c03 <pos_bit+0x23>
 0x1be4: MOV	$0x1f,%EDX
 0x1be9: JMP	1bf8 <pos_bit+0x18>
 0x1beb: NOPL	(%RAX,%RAX,1)
  (12)0x1bf0: SUB	$0x1,%EDX
  (12)0x1bf3: CMP	$-0x1,%EDX
  (12)0x1bf6: JE	1c00 <pos_bit+0x20>
  (12)0x1bf8: BT	%EDX,%EDI
  (12)0x1bfb: MOV	%EDX,%EAX
  (12)0x1bfd: JAE	1bf0 <pos_bit+0x10>
 0x1bff: RET
 0x1c00: MOV	%EDX,%EAX
 0x1c02: RET
 0x1c03: PUSH	%RAX
 0x1c04: MOV	$0x1,%EDI
 0x1c09: CALL	1060 <exit@plt>
 0x1c0e: XCHG	%AX,%AX
<pos_bit_opti>:
 0x1c10: TEST	%EDI,%EDI
 0x1c12: JE	1c72 <pos_bit_opti+0x62>
 0x1c14: TEST	$-0x10000,%EDI
 0x1c1a: MOV	$0xff,%ESI
 0x1c1f: SETNE	%AL
 0x1c22: SAL	$0x4,%EAX
 0x1c25: MOVSX	%AL,%EDX
 0x1c28: LEA	0x8(%RDX),%ECX
 0x1c2b: SAL	%CL,%ESI
 0x1c2d: TEST	%EDI,%ESI
 0x1c2f: JE	1c37 <pos_bit_opti+0x27>
 0x1c31: ADD	$0x8,%EAX
 0x1c34: MOVSX	%AL,%EDX
 0x1c37: LEA	0x4(%RDX),%ECX
 0x1c3a: MOV	$0xf,%ESI
 0x1c3f: SAL	%CL,%ESI
 0x1c41: TEST	%EDI,%ESI
 0x1c43: JE	1c4b <pos_bit_opti+0x3b>
 0x1c45: ADD	$0x4,%EAX
 0x1c48: MOVSX	%AL,%EDX
 0x1c4b: LEA	0x2(%RDX),%ECX
 0x1c4e: MOV	$0x3,%ESI
 0x1c53: SAL	%CL,%ESI
 0x1c55: TEST	%EDI,%ESI
 0x1c57: JE	1c5f <pos_bit_opti+0x4f>
 0x1c59: ADD	$0x2,%EAX
 0x1c5c: MOVSX	%AL,%EDX
 0x1c5f: LEA	0x1(%RDX),%ECX
 0x1c62: MOV	$0x1,%EDX
 0x1c67: SAL	%CL,%EDX
 0x1c69: LEA	0x1(%RAX),%ECX
 0x1c6c: TEST	%EDI,%EDX
 0x1c6e: CMOVNE	%ECX,%EAX
 0x1c71: RET
 0x1c72: PUSH	%RAX
 0x1c73: MOV	$0x1,%EDI
 0x1c78: CALL	1060 <exit@plt>
 0x1c7d: NOPL	(%RAX)
<pos_bit_best>:
 0x1c80: TEST	%EDI,%EDI
 0x1c82: JE	1d2b <pos_bit_best+0xab>
 0x1c88: MOV	%EDI,%EDX
 0x1c8a: XOR	%DX,%DX
 0x1c8d: CMP	$0x1,%EDX
 0x1c90: SBB	%ESI,%ESI
 0x1c92: AND	$0x1000f000,%ESI
 0x1c98: SUB	$0x10000000,%ESI
 0x1c9e: CMP	$0x1,%EDX
 0x1ca1: SBB	%ECX,%ECX
 0x1ca3: AND	$-0x10,%ECX
 0x1ca6: ADD	$0x18,%ECX
 0x1ca9: CMP	$0x1,%EDX
 0x1cac: SBB	%EAX,%EAX
 0x1cae: AND	$-0x10,%EAX
 0x1cb1: ADD	$0x18,%EAX
 0x1cb4: CMP	$0x1,%EDX
 0x1cb7: SBB	%R10D,%R10D
 0x1cba: AND	$-0xefff10,%R10D
 0x1cc1: ADD	$0xf00000,%R10D
 0x1cc8: CMP	$0x1,%EDX
 0x1ccb: SBB	%R9D,%R9D
 0x1cce: NOT	%R9D
 0x1cd1: AND	$0x10,%R9D
 0x1cd5: CMP	$0x1,%EDX
 0x1cd8: SBB	%R8D,%R8D
 0x1cdb: NOT	%R8D
 0x1cde: AND	$0x10,%R8D
 0x1ce2: CMP	$0x1,%EDX
 0x1ce5: SBB	%EDX,%EDX
 0x1ce7: AND	$0x100ff00,%EDX
 0x1ced: SUB	$0x1000000,%EDX
 0x1cf3: AND	%EDI,%EDX
 0x1cf5: CMOVE	%R10D,%ESI
 0x1cf9: CMOVE	%R9D,%ECX
 0x1cfd: CMOVE	%R8D,%EAX
 0x1d01: TEST	%ESI,%EDI
 0x1d03: JE	1d0b <pos_bit_best+0x8b>
 0x1d05: ADD	$0x4,%EAX
 0x1d08: MOVZX	%AL,%ECX
 0x1d0b: MOV	$0xc,%EDX
 0x1d10: SAL	%CL,%EDX
 0x1d12: TEST	%EDI,%EDX
 0x1d14: JE	1d1c <pos_bit_best+0x9c>
 0x1d16: ADD	$0x2,%EAX
 0x1d19: MOVZX	%AL,%ECX
 0x1d1c: MOV	$0x2,%EDX
 0x1d21: SAL	%CL,%EDX
 0x1d23: TEST	%EDI,%EDX
 0x1d25: SETNE	%DL
 0x1d28: ADD	%EDX,%EAX
 0x1d2a: RET
 0x1d2b: PUSH	%RAX
 0x1d2c: MOV	$0x1,%EDI
 0x1d31: CALL	1060 <exit@plt>
 0x1d36: NOPW	%CS:(%RAX,%RAX,1)
